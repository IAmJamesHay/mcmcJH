dev.off()
g <- grid.arrange(a,ncol=1)
png("test.png")
print(g)
dev.off()
png("test.png")
print(g)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("test.png")
print(g)
dev.off()
png("test.png")
plot(g)
dev.off()
ggsave("omg.png",plot=g)
png("test1.png",height=5,width=10)
plot(g)
dev.off()
png("test1.png",height=5,width=10,unit="cm")
png("test1.png",height=400,width=800)
plot(g)
dev.off()
png("test1.png",height=400,width=800)
plot(g)
dev.off()
g <- grid.arrange(a,a,ncol=2)
png("test1.png",height=400,width=800)
plot(g)
dev.off()
plot(g)
g <- grid.arrange(a,a,ncol=2)
dev.off()
dev.off()
plot(g)
cmc_all_plots_multi <- function(filename, mcmc_chains, param_table=NULL,burnin=NULL,best_fit=NULL){
    

    # For iter
    tmp_all <- NULL
    for(i in 1:length(mcmc_chains)){
        tmp <- as.data.frame(mcmc_chains[[i]])
        colnames(tmp)[1] <- "iteration"
        tmp$chain <- as.character(i)
        tmp_all <- rbind(tmp_all, tmp)
    }
    colnames(tmp_all) <- colnames(tmp)

    if(!is.null(param_table)){
       # Generate data for prior plots
        prior_dat <- generate_prior_data(colnames(mcmc_chains[[1]]),param_table)
    }
    # For densities
    melted <- NULL
    for(i in 1:length(mcmc_chains)){
        tmp <- as.data.frame(mcmc_chains[[i]])
        tmp_melt <- melt(tmp)
        tmp_melt$chain <- as.character(i)
        melted <- rbind(melted, tmp_melt)
    }

    
    for(i in 2:3){
        tmp_filename <- paste(filename,"_",colnames(mcmc_chains[[1]][i]),sep="")
        tmp_filename <- paste(tmp_filename, "_MCMC_plots.png", sep="")
        tmp_plot <- grid.arrange(mcmc_iter_multi(colnames(mcmc_chains[[1]])[i],tmp_all,burnin,best_fit),
                                mcmc_density_multi(colnames(mcmc_chains[[1]])[i],melted,
                          c(param_table[param_table$names==colnames(mcmc_chains[[1]])[i],"lower_bound"],param_table[param_table$names==colnames(mcmc_chains[[1]])[i],"upper_bound"]), #'prior_dat[prior_dat$param==colnames(mcmc_chains[[1]])[i],c("variable","value","chain")],
                       NULL,
                    best_fit
                 )
                    ,ncol=2)
   #'     dev.off()
        png(tmp_filename,height=480,width=1000)
        plot(tmp_plot)
        dev.off()
    }
save.image("ffs.RData")
quit()
n
setwd("~/Documents/R_packages/mcmcJH/R/")
plot(greb[,5]~greb[,6])
plot(greb[,4]~greb[,5])
plot(greb[,4]~greb[,7])
plot(greb[,5]~greb[,7])
plot(as.mcmc(greb))
plot(greb[,9]~greb[,10])
plot(greb[,10]~greb[,11])
c
mu
 mu <- c(1,2,3,5,5,8)
mu
mu*3
multiple_vector(mu,3)
multiply_vector(mu,3)
multiply_vector(mu,1)
 test <- matrix(ncol=3,nrow=3)
test
test[,1] <- c(1,2,3)
test[,2] <- c(5,5,5)
test[,3] <- c(7,8,10)
test
multiple_vector(test,3)
multiply_vector(test,3)
test <- test[1:2,]
test
multiply_vector(test,3)
c
c1
greb
greb[1:10,]
cov(greb[which(param_table[,2]==0)+1,])
param_table[,2]
cov(greb[which(param_table[,2]==0),])
cov(greb[(param_table[,2]==0),])
param_table[,2] == 0
which(param_table[,2] == 0)
greb[,which(param_table[,2] == 0)+1]
greb[1:10,which(param_table[,2] == 0)+1]
c1 <- cov(greb[1:10,which(param_table[,2] == 0)+1])
c1
c1 <- cov(greb[,which(param_table[,2] == 0)+1])
c1
c1 <- as.matrix(cov(greb[,which(param_table[,2] == 0)+1]))
mu <- param_table[,1]
mu
mu <- param_table[param_table[,2]==0,1]
mu
mvnorm_proposal(mu,c1,param_table[,4],param_table[,3])
param_table[,4]
param_table[,3]
par_tab <- param_table[param_table[,2]==0,]
par_tab
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
mvnorm_proposal(mu,c1*2.38,par_tab[,4],par_tab[,3])
scaletuning2(2.38,0.234,0.6)
scaletuning2(2.38,0.234,0.6)
scaletuning2(2.38,0.234,0.6)
scaletuning2(2.38,0.234,0.1)
scaletuning2(2.38,0.234,0.1)
scaletuning2(2.38,0.234,0.1)
sourceCpp("temp.cpp")
sourceCpp("temp.cpp")
multiply_test
getwd()
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
test
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,4)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
multiply_test(test,4)
multiply_test(test,1)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
multiply_test(test,1)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
library(Rcpp)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,3)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
multiply_test(test,3)
multiply_test(test,3)
multiply_test(test,4)
test
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
greb
greb[1:10,]
cov_test(greb)
cov_test(as.matrix(greb))
cov(greb)
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
subset_test(c(1,2,3,4,5,6,7,8),c(2,3,5))
subset_test(c(1,2,3,4,5,6,7,8),c(2,3,5))
subset_test(c(1,2,3,4,5,6,7,8),c(2,3,7))
subset_test(c(1,2,3,4,5,6,7,8),c(2,3,7))
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
subset_test2(c(1,2,3,4,5,6,7,8),c(0,2,4,6))
test
subset_test(test,c(1))
subset_test(test,c(0))
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
sourceCpp("~/Documents/R_packages/mcmcJH/R/temp.cpp")
test
test <- matrix(ncol=5,nrow=5)
test[,1]
test[,1] <- c(1,2,3,4,5)
test[,2] <- rep(5,5)
test
test[,3] <- rep(7,5)
test
test[,3] <- c(2,4,6,8,10)
test[,4] <- rep(5,5)
test[,5] <- rep(5,5)
test
subset_test2(test,c(1,2,3))
subset_test2(test,c(1,2,3))
subset_test2(test,c(1,2))
c
c1
c1 <- cov(greb)
c1
c1 <- cov(greb[,2:(ncol(greb)-1)])
c1
param_table
param_table[,2]
mvnorm_proposal(mu
)
mu
mvnorm_proposal(param_table[,1],c1,param_table[,4],param_table[,3],param_table[,2])
param_table[,2]
c1
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
c1[param_table[,2],param_table[,2]]
param_table[,2]
c1[param_table[,2]==0,param_table[,2]==0]
mvrnormArma(1,mu,c1[param_table[,2]==0,param_table[,2]==0])
mvrnormArma(1,mu,c1[param_table[,2]==0,param_table[,2]==0])
mvrnormArma(1,mu,c1[param_table[,2]==0,param_table[,2]==0])
mvrnormArma(1,mu,c1[param_table[,2]==0,param_table[,2]==0])
mvrnormArma(1,mu,c1[param_table[,2]==0,param_table[,2]==0])
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
which(param_table[,2]==0)
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
param_table[,1]
c1
c1[which(param_table[,2]==0,which(param_table[,2]==0)]
c1[which(param_table[,2]==0),which(param_table[,2]==0)]
c1[which(param_table[,2]==0),which(param_table[,2]==0)]
subset_mat
subset_mat(c1,param_table[,2])
subset_mat(c1,which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],param_table[,2])
param_table[,2]
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
which(param_table[,2]==0)
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
grebs <- NULL
for(i in 1:10000){
grebs[i,] <- mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
}
grebs <- matrix(nrow=10000,ncol=nrow(param_table))
for(i in 1:10000){
grebs[i,] <- mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
}
grebs
hist(grebs[,3])
hist(grebs[,4])
hist(grebs[,5])
hist(grebs[,6])
system.time(
for(i in 1:10000){
grebs[i,] <- mvnorm_proposal(param_table[,1],as.matrix(c1),param_table[,4],param_table[,3],which(param_table[,2]==0))
}
)
system.time(
for(i in 1:10000){
for(j in 1:nrow(param_table)){
proposal_function(param_table[j,1],param_table[j,3],param_table[j,4],0.1)
}
}
)
system.time(
for(i in 1:10000){
for(j in 1:nrow(param_table)){
proposal_function(param_table[j,1],param_table[j,3],param_table[j,4],0.1)
}
}
)
c1 <- cov(greb[,2:(ncol(greb)-1)])
c1
c1 <- as.matrix(c1)
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
param_table
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
param_table
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
3
setwd("~/Documents/R_packages/mcmcJH/R/")
param_table <- param_table("Grp 1 (H3N2)_params.csv",header=1)
    }
param_table <- param_table("Grp 1 (H3N2)_params.csv")
param_table <- load_param_table("Grp 1 (H3N2)_params.csv")
param_table <- load_param_table("/Grp 1 (H3N2)_params.csv")
param_table
param_tabe$value
param_talbe$value
param_table$value
param_table$step
param_table$fixed
rand.params(param_table)
data
param_table[,c("value","fixed","lower_bound","upper_bound","step","log_proposal")]
win1 <- run_MCMC_test(start,data,param_table,100000,0.15,1000,1,100000,100000,"test",500,c1,2.38,0.8)
param_table
greb <- MCMC_fit_single(data,param_table,100000,1000,1,10000,10000,1,0.234,"test")
greb <- MCMC_fit_single(data,param_table,1000000,10000,1,1000000,1000000,1,0.234,"test")
param_table
rep(2.38,2)
greb <- MCMC_fit_single(data,param_table,1000000,10000,1,1000000,1000000,1,0.234,"test")
greb <- MCMC_fit_single(data,param_table,1000000,10000,1,1000000,1000000,1,0.234,"test")
greb <- MCMC_fit_single(data,param_table,1000000,10000,1,1000000,1000000,1,0.234,"test")
greb$best_pars
class(greb)
quit()
n
quit()
n
getwd()
setwd("..")
start_dir <- getwd()
overall_names
tmp_table
utils::View(tmp_table)
start_dir
utils::View(tmp_table)
utils::View(tmp_table)
grep("H3N2",tmp_table2$Strain)[grep("panama",tmp_table2$Strain)]."Strain"]
tmp_table2[grep("H3N2",tmp_table2$Strain)[grep("panama",tmp_table2$Strain)]."Strain"]
tmp_table2[grep("H3N2",tmp_table2$Strain)[grep("panama",tmp_table2$Strain)],"Strain"]
grep("H3N2",tmp_table2$Strain)[grep("panama",tmp_table2$Strain)]
grep("H3N2",tmp_table2$Strain)[grep("panama",tmp_table2$Strain)]
tmp_table[grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)],"strain"]
grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)
]
grep("H3N2",tmp_table$strain)
!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain))
!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)
]
!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain])
grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain]
grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)]
!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
grep("H3N2",tmp_table$strain)[!is.na(grep("panama",tmp_table$strain))]
grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)]
!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
na.omit(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
na.omit(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
na.omit(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])[1]
which(!is.na(grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)])
)
a <- grep("H3N2",tmp_table$strain)[grep("panama",tmp_table$strain)]
a
!is.na(a)
na.omit(a)
b <- na.omit(a)
b
a
a[!is.na(a)]
getwd()
setwd("..")
setwd("..")
getwd()
setwd("..")
setwd("outputs")
getwd()
utils::View(tmp_table)
getwd()
class(tmp_table)
utils::View(tmp_table)
a
utils::View(tmp_table)
utils::View(tmp_table2)
a
a
a
getwd()
setwd("..")
a
tmp_table[a,"strain"]
a
a
utils::View(tmp_table)
a
a
a
tmp_table[a,"strain"]
utils::View(tmp_table)
tmp_table$strain
grep("H3N2",tmp_table$strain)
grep("panama",tmp_table$strain)
intersect(grep("panama",tmp_table$strain),grep("H3N2",tmp_table$strain)
)
getwd()
setwd("..")
setwd("..")
getwd()
consolidate_data(param_files,getwd())
consolidate_data(param_files,getwd())
setwd("..")
getwd()
setwd("..")
consolidate_data(param_files,getwd())
getwd9)
getwd()
consolidate_data(param_files,getwd())
consolidate_data(param_files,getwd())
param_table
getwd()
param_file <- "~/Documents/R_packages/mcmcJH/R/tmp/inputs/Grp 1 (H3N2)_params.csv"
param_table <- load_param_table(param_file)
data_file <- "~/Documents/R_packages/mcmcJH/R/tmp/inputs/ferret_panama_split.csv"
data <- melted.data[melted.data$strain == "A/Panama/2007/1999",]
data
data <- melted.data[melted.data$strain == "A/Panama/2007/1999 (H3N2)",]
data
data <- data[data$group == "Grp 1 (H3N2)", c("variable","value")]
data
greb <- MCMC_fit_single(data,param_table,100000,5000,1,100000,100000,1,0.234,"testingagain","/tmp2")
getwd()
greb <- MCMC_fit_single(data,param_table,100000,5000,1,100000,100000,1,0.234,"testingagain","/tmp2")
greb <- MCMC_fit_single(data,param_table,100000,5000,1,100000,100000,1,0.234,"testingagain","~/Documents/R_packages/mcmcJH/R/tmp2")
greb
param_table
param_table$fixed
param_table$fixed[1] <- 1
param_table$fixed[2] <- 1
greb <- MCMC_fit_single(data,param_table,100000,5000,1,100000,100000,1,0.234,"testingagain","~/Documents/R_packages/mcmcJH/R/tmp2")
greb1 <- read.csv(greb$files[[1]])
plot(as.mcmc(greb1))
getwD()
getwd()
gc()
test <- c(285, 160, 183, 160, 160,806, 160,101,160, 95)
hist(test)
?hist
hist(test,breaks=20)
hist(test,breaks=200)
quit()
n
quit()
n
quit()
n
